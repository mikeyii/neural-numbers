(()=>{"use strict";var t,e,n,i,r=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},o=function(){function t(t){if(this.layersLayout=t,this.neurons=[],this.weights=[],this.biasesWeights=[],this.trainingEpoch=0,this.trainingIteration=0,this.trainingData=[],this.momentum=.7,this.learningRate=.3,this.NEEDED_ERROR_RATE=.01,this.RESET_WEIGHTS_AFTER=0,this.latestDeltaWeights=[],this.latestDeltaBiasesWeights=[],this._onEpochUpdate=function(){},t.length<3)throw new Error("There should be at least 1 hidden layer");this.init()}return t.prototype.initNeurons=function(){this.neurons=[];for(var t=[],e=0;e<this.layersLayout.length;e++)t[e]=new Float32Array(this.layersLayout[e]);this.neurons=r([],t,!0)},t.prototype.initWeights=function(){var t=this;this.weights=[];for(var e=[],n=1;n<this.neurons.length;n++){e[n-1]=[];for(var i=0;i<this.neurons[n].length;i++)e[n-1][i]=new Float32Array(this.neurons[n-1].length).map((function(){return t.random(-.5,.5)}))}this.weights=r([],e,!0);var o=this.weights.map((function(t){return t.map((function(t){return t.map((function(){return 0}))}))}));this.latestDeltaWeights=o},t.prototype.initBiases=function(){var t=this.neurons.slice(1).map((function(t){return t.map((function(){return Math.random()}))}));this.biasesWeights=t;var e=t.map((function(t){return t.map((function(){return 0}))}));this.latestDeltaBiasesWeights=e},t.prototype.random=function(t,e){return Math.random()*(e-t)+t},t.prototype.activationFunction=function(t){return 1/(1+Math.exp(-t))},t.prototype.derivative=function(t){return(1-t)*t},t.prototype.multiplyMatrix=function(t,e){return Float32Array.from(t).reduce((function(t,n,i){return t+n*e[i]}),0)},t.prototype.countMSEError=function(t,e){return 1===e.length?Math.pow(e[0]-t[0],2):e.reduce((function(n,i,r){return n+Math.pow(i-t[r],2)/e.length}),0)},t.prototype.trainIteration=function(t){for(var e=t.input,n=t.output,i=this.run(e),r=[],o=this.neurons.length-1;o>0;o--){r[o]=new Float32Array(this.neurons[o].length);for(var s=function(t){var e=a.neurons[o][t],s=void 0;if(o===a.neurons.length-1)s=(n[t]-i[t])*a.derivative(e);else{var h=a.multiplyMatrix(a.weights[o].map((function(e){return e[t]})),r[o+1]);s=a.derivative(e)*h}r[o][t]=s;for(var u=0;u<a.neurons[o-1].length;u++){var l=a.neurons[o-1][u]*s,c=a.learningRate*l+a.momentum*a.latestDeltaWeights[o-1][t][u];a.latestDeltaWeights[o-1][t][u]=c,a.weights[o-1][t][u]+=c}var f=a.neurons[o][t]*s,p=a.learningRate*f+a.momentum*a.latestDeltaBiasesWeights[o-1][t];a.latestDeltaBiasesWeights[o-1][t]=p,a.biasesWeights[o-1][t]+=p},a=this,h=0;h<this.neurons[o].length;h++)s(h)}return this.countMSEError(i,n)},t.prototype.init=function(){this.initNeurons(),this.initWeights(),this.initBiases()},t.prototype.setWeights=function(t){for(var e=t.weights,n=t.biases,i=0;i<this.weights.length;i++)for(var r=0;r<this.weights[i].length;r++)for(var o=0;o<this.weights[i][r].length;o++)this.weights[i][r][o]=e[i][r][o];for(i=0;i<this.biasesWeights.length;i++)for(r=0;r<this.biasesWeights[i].length;r++)this.biasesWeights[i][r]=n[i][r]},t.prototype.run=function(t){for(var e=0;e<this.neurons[0].length;e++)this.neurons[0][e]=t[e];for(e=1;e<this.neurons.length;e++)for(var n=0;n<this.neurons[e].length;n++){var i=this.multiplyMatrix(this.neurons[e-1],this.weights[e-1][n]),r=this.activationFunction(i+this.biasesWeights[e-1][n]);this.neurons[e][n]=r}return[].slice.call(this.neurons[this.neurons.length-1])},t.prototype.train=function(t,e){this.trainingData=t,this.epochsErrorRate=new Float32Array(e);for(var n=0;n<e;n++){this.RESET_WEIGHTS_AFTER&&n%this.RESET_WEIGHTS_AFTER==0&&this.epochsErrorRate[n-1]>this.NEEDED_ERROR_RATE&&(this.initWeights(),this.initBiases()),this.iterationsErrorRate=new Float32Array(t.length);for(var i=0;i<this.trainingData.length;i++){var r=this.trainIteration(t[i]);this.iterationsErrorRate[i]=r}var o=this.iterationsErrorRate.reduce((function(t,e){return t+e}))/t.length;this.epochsErrorRate[n]=o,this._onEpochUpdate(this.trainingEpoch),this.trainingEpoch+=1}},t.prototype.displayResult=function(t,e){var n=this.run(t).map((function(t){return+t.toFixed(3)}));console.log("".concat(n,", expected ").concat(e))},t.prototype.onEpochUpdate=function(t){this._onEpochUpdate=t},t}(),s=document.getElementById("clear"),a=document.getElementById("draw"),h=document.getElementById("result-table"),u=a.getContext("2d"),l=1,c={x:0,y:0},f=new o([784,16,16,10]);function p(){u.fillStyle="#000",u.fillRect(0,0,u.canvas.width,u.canvas.height),u.fillStyle="#fff",E(new Array(10).fill(0))}function g(t){if(t instanceof MouseEvent){if(0!==t.button)return;a.addEventListener("mousemove",y)}else a.addEventListener("touchmove",y);v(t)}function v(t){if(t.preventDefault(),t instanceof MouseEvent)c.x=t.offsetX/10-l/2,c.y=t.offsetY/10-l/2;else{var e=t.touches[0],n=a.offsetParent;c.x=(e.pageX-n.offsetLeft)/10-l/2,c.y=(e.pageY-n.offsetTop)/10-l/2}}function d(){a.removeEventListener("mousemove",y)}function y(t){u.beginPath(),u.lineWidth=2,u.lineCap="round",u.strokeStyle="#fff",u.moveTo(c.x,c.y),v(t),u.lineTo(c.x,c.y),u.stroke();var e,n=(e=u.getImageData(0,0,u.canvas.width,u.canvas.height),Array.from(e.data.filter((function(t,e){return e%4==0}))).map((function(t){return t/255})));E(f.run(n))}function E(t){var e=h.children[0].children;Array.from(e).forEach((function(e,n){e.children[1].innerText=(+t[n].toFixed(3)).toString()}))}t=void 0,e=void 0,i=function(){var t;return function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(h){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,h])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch("./3.json")];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),f.setWeights(t),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function s(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}h((i=i.apply(t,e||[])).next())})),a.addEventListener("mousedown",g),a.addEventListener("mouseup",d),s.addEventListener("click",p),a.addEventListener("touchstart",g),a.addEventListener("touchend",d),u.canvas.width=28,u.canvas.height=28,p()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,