(()=>{"use strict";var t,e,n,o,i=function(t){return 1/(1+Math.exp(-t))},r=function(t){return(1-t)*t},a=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},s=function(){function t(t){this.neurons=[],this.weights=[],this.biases=[],this.trainingEpoch=0,this.momentum=.7,this.learningRate=.3,this.deltaWeights=[],this.deltaBiases=[],this.epochsErrorRate=[],this._onEpochUpdate=[],this._activationFunction=i,this._activationFunctionDerivative=r,t&&(this.setLayout(t),this.initNeuralNetwork(t))}return t.prototype.setLayout=function(t){if(t.length<3)throw new Error("Minimum required length of layout is 3. There should be at least: 1 input, 1 hidden and 1 output layers");this.layout=a([],t,!0)},t.prototype.initNeuralNetwork=function(t){for(var e=[],n=[],o=[],i=[],r=[],a=0;a<this.layout.length;a++)if(e[a]=new Float32Array(t[a]),a){var s=a-1;n[s]=new Float32Array(t[a]),i[s]=new Float32Array(t[a]),o[s]=[],r[s]=[];for(var u=0;u<t[a];u++){n[s][u]=this.random(-.5,.5),o[s][u]=new Float32Array(t[s]),r[s][u]=new Float32Array(t[s]);for(var h=0;h<t[s];h++)o[s][u][h]=this.random(-.5,.5)}}this.neurons=e,this.biases=n,this.weights=o,this.deltaBiases=i,this.deltaWeights=r},t.prototype.random=function(t,e,n){return void 0===n&&(n=4),+(Math.random()*(e-t)+t).toFixed(n)},t.prototype.deepCopy=function(t){return JSON.parse(JSON.stringify(t))},t.prototype.multiplyMatrix=function(t,e){return t.reduce((function(t,n,o){return t+n*e[o]}),0)},t.prototype.countMSEError=function(t,e){return 1===e.length?Math.pow(e[0]-t[0],2):e.reduce((function(n,o,i){return n+Math.pow(o-t[i],2)/e.length}),0)},t.prototype.trainIteration=function(t){for(var e=t.input,n=t.output,o=this.run(e),i=[],r=this.neurons.length-1;r>0;r--){i[r]=new Float32Array(this.neurons[r].length);for(var a=function(t){var e=s.neurons[r][t],a=void 0;if(r===s.neurons.length-1)a=(n[t]-o[t])*s._activationFunctionDerivative(e);else{var u=s.multiplyMatrix(i[r+1],s.weights[r].map((function(e){return e[t]})));a=s._activationFunctionDerivative(e)*u}i[r][t]=a;for(var h=0;h<s.neurons[r-1].length;h++){var l=s.neurons[r-1][h]*a,c=s.learningRate*l+s.momentum*s.deltaWeights[r-1][t][h];s.deltaWeights[r-1][t][h]=c,s.weights[r-1][t][h]+=c}var f=s.neurons[r][t]*a,p=s.learningRate*f+s.momentum*s.deltaBiases[r-1][t];s.deltaBiases[r-1][t]=p,s.biases[r-1][t]+=p},s=this,u=0;u<this.neurons[r].length;u++)a(u)}return this.countMSEError(o,n)},t.prototype.emitOnEpochUpdate=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._onEpochUpdate.forEach((function(e){e.apply(void 0,t)}))},t.prototype.layoutCheck=function(){if(!this.layout)throw new Error("Layout was not initialized. Do it with: new Neural(layout: number[]), setLayout(layout: number[]) of fromJSON(neuralJson)")},t.prototype.setActivationFunctions=function(t,e){this._activationFunction=t,this._activationFunctionDerivative=e},t.prototype.fromJSON=function(t){this.setLayout(t.layout);for(var e=[],n=[],o=[],i=[],r=[],a=0;a<this.layout.length;a++)if(e[a]=new Float32Array(this.layout[a]),0!==a){var s=a-1;n[s]=new Float32Array(this.layout[a]),i[s]=new Float32Array(this.layout[a]),o[s]=[],r[s]=[];for(var u=0;u<this.layout[a];u++){e[a][u]=t.neurons[a][u],n[s][u]=t.biases[s][u],o[s][u]=new Float32Array(this.layout[s]),r[s][u]=new Float32Array(this.layout[s]);for(var h=0;h<this.layout[s];h++)o[s][u][h]=t.weights[s][u][h],r[s][u][h]=t.deltaWeights[s][u][h]}}this.neurons=e,this.biases=n,this.weights=o,this.deltaBiases=i,this.deltaWeights=r},t.prototype.toJSON=function(){return this.layoutCheck(),{layout:a([],this.layout,!0),neurons:this.deepCopy(this.neurons),weights:this.deepCopy(this.weights),biases:this.deepCopy(this.biases),deltaWeights:this.deepCopy(this.deltaWeights),deltaBiases:this.deepCopy(this.deltaBiases)}},t.prototype.run=function(t){this.layoutCheck();for(var e=0;e<this.neurons[0].length;e++)this.neurons[0][e]=t[e];for(e=1;e<this.neurons.length;e++)for(var n=0;n<this.neurons[e].length;n++){var o=this.multiplyMatrix(this.neurons[e-1],this.weights[e-1][n]),i=this._activationFunction(o+this.biases[e-1][n]);this.neurons[e][n]=i}return[].slice.call(this.neurons[this.neurons.length-1])},t.prototype.train=function(t,e){this.layoutCheck();for(var n=0;n<e;n++){for(var o=0,i=0;i<t.length;i++)o+=this.trainIteration(t[i])/t.length;this.epochsErrorRate.push(o),this.emitOnEpochUpdate(this.trainingEpoch),this.trainingEpoch++}},t.prototype.displayRun=function(t,e){var n=this.run(t).map((function(t){return+t.toFixed(3)}));console.log("".concat(n,", expected ").concat(e))},t.prototype.onEpochUpdate=function(t){this._onEpochUpdate.push(t)},t}(),u=document.getElementById("clear"),h=document.getElementById("draw"),l=document.getElementById("result-table"),c=h.getContext("2d"),f=1,p={x:0,y:0},y=new s([784,16,16,10]);function d(){c.fillStyle="#000",c.fillRect(0,0,c.canvas.width,c.canvas.height),c.fillStyle="#fff",E(new Array(10).fill(0))}function v(t){if(t instanceof MouseEvent){if(0!==t.button)return;h.addEventListener("mousemove",w)}else h.addEventListener("touchmove",w);g(t)}function g(t){if(console.log(t),t.preventDefault(),t instanceof MouseEvent)p.x=t.offsetX/10-f/2,p.y=t.offsetY/10-f/2;else{var e=t.touches[0],n=h.offsetParent;p.x=(e.pageX-n.offsetLeft)/10-4*f,p.y=(e.pageY-n.offsetTop)/10-f/2}}function m(){h.removeEventListener("mousemove",w)}function w(t){c.beginPath(),c.lineWidth=2,c.lineCap="round",c.strokeStyle="#fff",c.moveTo(p.x,p.y),g(t),c.lineTo(p.x,p.y),c.stroke();var e,n=(e=c.getImageData(0,0,c.canvas.width,c.canvas.height),Array.from(e.data.filter((function(t,e){return e%4==0}))).map((function(t){return t/255})));E(y.run(n))}function E(t){var e=l.children[0].children[1].children;Array.from(e).forEach((function(e,n){e.innerText=(+t[n].toFixed(2)).toString()}))}t=void 0,e=void 0,o=function(){var t;return function(t,e){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(s){return function(u){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,s[0]&&(a=0)),a;)try{if(n=1,o&&(i=2&s[0]?o.return:s[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,s[1])).done)return i;switch(o=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,o=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],o=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch("./3.json")];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),y.fromJSON(t),[2]}}))},new((n=void 0)||(n=Promise))((function(i,r){function a(t){try{u(o.next(t))}catch(t){r(t)}}function s(t){try{u(o.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((o=o.apply(t,e||[])).next())})),h.addEventListener("mousedown",v),h.addEventListener("mouseup",m),u.addEventListener("click",d),h.addEventListener("touchstart",v),h.addEventListener("touchend",m),c.canvas.width=28,c.canvas.height=28,d()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,